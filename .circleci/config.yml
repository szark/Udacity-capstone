# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  destroy-environment:
    description: Destroy minikube
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name minikube 

jobs:
  build-code:
    docker:
    # Use the same Docker base as the project
      - image: python:3.9-alpine3.13
    working_directory: ~/repo
    steps:
      - checkout
    # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            apk --update add make
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure Minikube server exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/minikube.yml \
              --tags app=minikube \
              --stack-name "minikube" \

      - run:
          name: Add back-end ip to ansible inventory and store new IP to memstash
          command: |
            # Check if minikube instance already exists
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:app,Values=minikube" > /tmp/ip

            if [ $(cat /tmp/ip) = "[]" ]
            then
              aws cloudformation deploy \
              --template-file .circleci/files/minikube.yml \
              --tags app=minikube \
              --stack-name "minikube" 
            fi

      - run: 
          name: Store Minikube IP
          command: |
            # Check if minikube instance already exists
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:app,Values=minikube" > /tmp/realip

            minikubeip=$(cat /tmp/realip)
            echo "Minikube IP is $minikubeip"
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$minikubeip" https://api.memstash.io/values/minikubeip
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment     

  configure-infrastructure:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b2:e2:f2:c3:61:4d:1f:50:7d:7c:44:54:98:cf:32:b8"]
      # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            # Your code here
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
          no_output_timeout: 30m
      - run:
          name: Install dependencies for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      #- destroy-environment    

  deploy-scripts:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b2:e2:f2:c3:61:4d:1f:50:7d:7c:44:54:98:cf:32:b8"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: 
          - v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh && apk add tar
      - run:
          name: archive app files
          command: |
            cd ..
            tar -cvf project.tar project
            ls -al ~/
      - run:
          name: Deploy app
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
            -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-scripts.yml
          no_output_timeout: 30m
      - run:
          name: Install dependencies for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      # - destroy-environment

workflows:
  default:
    jobs:
      - build-code:
          filters:
            branches:
              only: [main]
      - deploy-infrastructure:
          requires: [build-code]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-scripts:
          requires: [configure-infrastructure]